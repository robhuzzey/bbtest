{"version":3,"sources":["Components/Card.js","Components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","maxWidth","media","height","MediaCard","props","classes","react_default","a","createElement","Card","className","CardMedia","image","concat","process","id","title","name","CardContent","Typography","gutterBottom","variant","component","Object","keys","attributes","map","attributeName","i","key","Button","disabled","isActive","onClick","chooseAttribute","size","color","theme","root","flexGrow","Cards","Grid","container","spacing","children","App","initialState","players","playersTurn","started","lastWinner","state","assign","_this","componentDidMount","beginGame","shuffleCards","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","assignCardsToPlayers","playersWithCards","shuffledCards","Pokemon","player","cards","push","shift","generatePlayers","numberOfPlayers","toConsumableArray","Array","score","selectedCard","setState","determineWinner","playerId","category","winner","filter","reduce","base","moveCard","cardId","winningPlayerId","arguments","undefined","currentPlayer","cardInPlay","chooseNextPlayer","_this2","this","Container","Fragment","Components_Cards","isPlaying","playerState","item","xs","english","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2392dbee.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 500,\n  },\n  media: {\n    height: 140,\n  }\n});\n\nexport default function MediaCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.media}\n        image={`${process.env.PUBLIC_URL}/sprites/${props.id}.png`}\n        title={props.name}\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {props.name}\n        </Typography>\n        <ul>\n          {Object.keys(props.attributes).map((attributeName, i) => {\n            return (\n              <li key={`attribute_${i}`}>\n                <Button disabled={!props.isActive} onClick={() => props.chooseAttribute(attributeName)} size=\"small\" color=\"primary\">\n                  {attributeName} ({props.isActive ? props.attributes[attributeName] : '...'})\n                </Button>\n              </li>\n            )\n          })}\n        </ul>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  }\n}));\n\nconst Cards = (props) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={6}>\n        {props.children}\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Pokemon from './pokemon.json';\n\nimport Card from './Components/Card'\nimport Cards from './Components/Cards'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\n\nclass App extends Component {\n    initialState = {\n      players: [],\n      playersTurn: 0,\n      started: false,\n      lastWinner: {}\n    }\n    state = Object.assign({}, this.initialState)\n\n    componentDidMount = () => {\n      this.beginGame()\n    }\n\n    // Stolen array sort from : https://stackoverflow.com/a/2450976\n    shuffleCards = (array) => {\n      let currentIndex = array.length, temporaryValue, randomIndex\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex -= 1\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex]\n        array[currentIndex] = array[randomIndex]\n        array[randomIndex] = temporaryValue\n      }\n\n      return array\n    }\n\n    assignCardsToPlayers = (players) => {\n      let playersWithCards = [].concat(players)\n      const shuffledCards = this.shuffleCards([].concat(Pokemon))\n      while(shuffledCards.length > 0) {\n        playersWithCards = playersWithCards.map(player => {\n          if (shuffledCards.length === 0) return player\n          player.cards.push(shuffledCards.shift())\n          return player\n        })\n      }\n      return playersWithCards\n    }\n\n    generatePlayers = (numberOfPlayers) => {\n      return [...Array(numberOfPlayers)].map((player, id) => {\n        return {\n          score: 0,\n          cards: [],\n          selectedCard: 0,\n          id\n        }\n      })\n    }\n\n    beginGame = () => {\n      const players = this.generatePlayers(2)\n      const playersWithCards = this.assignCardsToPlayers(players)\n      this.setState(() => {\n        return Object.assign({}, this.initialState, {\n          started: true,\n          players: playersWithCards\n        })\n      })\n    }\n\n    determineWinner = (playerId, category) => {\n      // Check all other players cards\n      const winner = this.state.players.filter(player => player.id !== playerId).reduce((winner, player) => {\n        if (winner.cards[winner.selectedCard].base[category] < player.cards[player.selectedCard].base[category]) winner = player\n        return winner\n      }, this.state.players[playerId]) // Start off assuming current player is the winner\n      const player = this.state.players[playerId]\n      this.moveCard(playerId, player.cards[player.selectedCard].id, winner.id)\n      this.setState(() => {\n        return {\n          lastWinner: winner\n        }\n      })\n    }\n\n    moveCard = (playerId, cardId, winningPlayerId = null) => {\n      const players = [].concat(this.state.players)\n      const currentPlayer = players[this.state.playersTurn]\n      const cardInPlay = currentPlayer.cards[currentPlayer.selectedCard]\n      const cards = players[playerId].cards.filter(card => card.id !== cardId)\n      players[playerId].cards = cards\n      players[winningPlayerId].cards.push(cardInPlay)\n      players[winningPlayerId].score++\n      this.setState(() => {\n        return {\n          players\n        }\n      })\n    }\n\n    chooseAttribute = (playerId, category) => {\n      this.determineWinner(playerId, category)\n      this.chooseNextPlayer()\n    }\n\n    chooseNextPlayer = () => {\n      let playersTurn = this.state.playersTurn + 1\n      if(playersTurn > this.state.players.length - 1) {\n        playersTurn = 0\n      }\n      this.setState(() => {\n        return {\n          playersTurn\n        }\n      })\n    }\n\n    render() {\n        return (\n          <Container>  \n              {this.state.started && (\n                <>\n                  <Cards>\n                    {this.state.players.map((player, i) => {\n                      const playerId = i\n                      const isPlaying = this.state.playersTurn === playerId\n                      const score = player.score\n                      const card = player.cards[player.selectedCard]\n                      const playerState = isPlaying ? 'playing' : 'waiting'\n                      return (\n                        <Grid item xs={6} key={`card_${card.id}`}>\n                          <div className={`player ${playerState}`}>\n                            <h1>Player {playerId + 1} {this.state.lastWinner.id === playerId && 'Winner!'}</h1>\n                            <p>Score {score}</p>\n                            <p>Remaining cards count {player.cards.length}</p>\n                            {player.cards.length > 0 && (\n                              <Card \n                                isActive={isPlaying}\n                                id={card.id}\n                                name={card.name.english}\n                                attributes={card.base}\n                                chooseAttribute={(category, value) => {\n                                  this.chooseAttribute(i, category)\n                                }}\n                              />\n                            )}\n                          </div>\n                        </Grid>\n                      )\n                    })}\n                  </Cards>\n                  <Button variant=\"contained\" color=\"secondary\" onClick={this.beginGame}>Reset game</Button>\n                </>\n              )}\n            </Container>\n                \n\n\n                // <header>\n                //     <h1>Pokemon Top Trumps</h1>\n                // </header>\n                // <main>\n\n                //     <h2>Rules of the game</h2>\n                //     <p>\n                //         Any number of people can play Top Trumps, that’s what makes it the world’s coolest card game!\n                //         Here are instructions on how to play Top Trumps.\n                //     </p>\n\n                //     <p>\n                //         To start the game, shuffle and deal all the cards face down. Each player holds their cards so\n                //         that they can see the top card only.\n                //     </p>\n\n                //     <p>\n                //         The player to the dealer’s left starts by reading out a category from the top card (e.g. Height,\n                //         value 5) The other players then read out the same category from their cards. The one with the\n                //         best or highest value wins, and that player collects all the top cards, including their own, and\n                //         moves them to the bottom of their pile. It is then their turn again to choose a category from\n                //         the next card.\n                //     </p>\n\n                //     <p>\n                //         If two or more cards share the top value or data is not available for that particular subject\n                //         then all the cards are placed in the middle and the same player chooses again from the next\n                //         card. The winner of the hand takes the cards in the middle as well.\n                //     </p>\n\n                //     <p>The person with all the cards at the end is the winner.</p>\n                //     <img src={Example} alt=\"Example top trumps cards\" />\n                //     <p>Example top trumps cards</p>\n                //     <h2>The tasks</h2>\n                //     <h4>Level 1</h4>\n                //     <ol>\n                //         <li>Render the Pokemon as Cards from data</li>\n                //     </ol>\n                //     <h4>Level 2</h4>\n                //     <ol>\n                //         <li>Render the Pokemon sprites</li>\n                //         <li>Make the cards filterable by type</li>\n                //         <li>Render cards differently by type</li>\n                //     </ol>\n                //     <h4>Level 3</h4>\n                //     <ol>\n                //         <li>Randomly deal the cards into two hands</li>\n                //         <li>Show the first card in each hand</li>\n                //         <li>Select an attribute to play e.g. Attack</li>\n                //         <li>Show the winner of the hand</li>\n                //         <li>Or show a tie hand</li>\n                //         <li>Keep a score, or assign the round winner the losing card</li>\n                //         <li>Example actions: Reset game, show all cards, start game</li>\n                //     </ol>\n                //     <p>\n                //         <strong>Add, change or modify features as you see fit, have fun with it!</strong>\n                //     </p>\n                //     <p>\n                //         <strong>Feel free to use react-plugins e.g. react-router, redux</strong>\n                //     </p>\n                // </main>\n                // <footer>&copy; 2019 Brilliant Basics Ltd</footer>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}