{"version":3,"sources":["example.png","Components/Card.js","Components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","card","maxWidth","media","height","MediaCard","props","classes","react_default","a","createElement","Card","className","CardActionArea","CardMedia","image","concat","process","id","title","name","CardContent","Typography","gutterBottom","variant","component","color","Object","keys","attributes","map","attributeName","Button","disabled","isActive","onClick","chooseAttribute","size","theme","root","flexGrow","Cards","Grid","container","spacing","item","xs","justify","children","App","state","players","numberOfPlayers","playersTurn","started","middleCards","lastWinner","shuffleCards","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","beginGame","toConsumableArray","Array","_this","player","score","cards","selectedCard","shuffledCards","Pokemon","push","shift","setState","playerId","category","console","log","winner","filter","reduce","base","chooseNextPlayer","chooseNextCard","_this2","this","Fragment","Components_Cards","i","isPlaying","playerState","class","english","value","src","Example","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2ed799e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/example.b0906997.png\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nexport default function MediaCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={`${process.env.PUBLIC_URL}/sprites/${props.id}.png`}\n          title={props.name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            <ul>\n              {Object.keys(props.attributes).map(attributeName => {\n                return (\n                  <li>\n                    <Button disabled={!props.isActive} onClick={() => props.chooseAttribute(attributeName)} size=\"small\" color=\"primary\">\n                      {attributeName} ({props.isActive ? props.attributes[attributeName] : '...'})\n                    </Button>\n                  </li>\n                )\n              })}\n            </ul>\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  }\n}));\n\nconst Cards = (props) => {\n  const classes = useStyles();\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={2}>\n          {props.children}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Cards\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Pokemon from './pokemon.json';\nimport Example from './example.png';\n\nimport Card from './Components/Card'\nimport Cards from './Components/Cards'\n\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n    state = {\n      players: [],\n      numberOfPlayers: 5, // should be props I think\n      playersTurn: 0,\n      started: false,\n      middleCards: [],\n      lastWinner: {}\n    };\n\n    // Stolen array sort from : https://stackoverflow.com/a/2450976\n    shuffleCards = (array) => {\n      let currentIndex = array.length, temporaryValue, randomIndex\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex -= 1\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex]\n        array[currentIndex] = array[randomIndex]\n        array[randomIndex] = temporaryValue\n      }\n\n      return array\n    }\n\n    beginGame = () => {\n      let players = [...Array(this.state.numberOfPlayers)].map((player, id) => {\n        return {\n          score: 0,\n          cards: [],\n          selectedCard: 0,\n          id\n        }\n      })\n\n      const shuffledCards = this.shuffleCards(Pokemon)\n\n      while(shuffledCards.length > 0) {\n        players = players.map(player => {\n          if (shuffledCards.length === 0) return player\n          player.cards.push(shuffledCards.shift())\n          return player\n        })\n      }\n\n      this.setState(() => {\n        return {\n          started: true,\n          players\n        }\n      })\n    }\n\n    chooseAttribute = (playerId, category, ) => {\n      console.log(\"CHOOSE\", category, playerId, this.state.players)\n\n      // Check all other players cards\n      const winner = this.state.players.filter(player => player.id !== playerId).reduce((winner, player) => {\n        if (winner.cards[winner.selectedCard].base[category] < player.cards[player.selectedCard].base[category]) winner = player\n        return winner\n      }, this.state.players[playerId]) // Start off assuming current player is the winner\n\n      console.log(\"WINNER\", winner, playerId)\n\n      this.chooseNextPlayer()\n\n      this.setState(() => {\n        return {\n          lastWinner: winner\n        }\n      })\n    }\n\n    chooseNextCard = (playerId) => {\n      const players = [].concat(this.state.players) // to stop mutations\n      players[playerId].selectedCard++\n      this.setState(() => {\n        return {\n          players\n        }\n      })\n    }\n\n    chooseNextPlayer = () => {\n      let playersTurn = this.state.playersTurn + 1\n      if(playersTurn > this.state.players.length - 1) {\n        playersTurn = 0\n      }\n      this.setState(() => {\n        return {\n          playersTurn\n        }\n      })\n    }\n\n    render() {\n\n        return (\n            <div id=\"app\">\n\n                <button onClick={this.beginGame}>Begin!</button>\n\n                Last winner: {this.state.lastWinner.id}\n                PlayersTurn: {this.state.playersTurn}\n                \n                {this.state.started && (\n                  <>\n                    <p>Players turn: {this.state.playersTurn}</p>\n                    <Cards>\n                      {this.state.players.map((player, i) => {\n                        const playerId = i\n                        const isPlaying = this.state.playersTurn === playerId\n                        const score = player.score\n                        const card = player.cards[player.selectedCard]\n                        const playerState = isPlaying ? 'playing' : 'waiting'\n                        return (\n                          <div class={`player ${playerState}`}>\n                            <h1>Player {playerId}</h1>\n                            <p>Score {score}</p>\n                            {isPlaying && <button onClick={() => this.chooseNextCard(playerId)}>Next card</button>}\n                            <Card \n                              isActive={isPlaying}\n                              id={card.id}\n                              name={card.name.english}\n                              attributes={card.base}\n                              chooseAttribute={(category, value) => {\n                                this.chooseAttribute(i, category)\n                              }}\n                            />\n                          </div>\n                        )\n                      })}\n                    </Cards>\n                    \n                    \n                  </>\n                )}\n                \n\n\n\n                <header>\n                    <h1>Pokemon Top Trumps</h1>\n                </header>\n                <main>\n\n                    <h2>Rules of the game</h2>\n                    <p>\n                        Any number of people can play Top Trumps, that’s what makes it the world’s coolest card game!\n                        Here are instructions on how to play Top Trumps.\n                    </p>\n\n                    <p>\n                        To start the game, shuffle and deal all the cards face down. Each player holds their cards so\n                        that they can see the top card only.\n                    </p>\n\n                    <p>\n                        The player to the dealer’s left starts by reading out a category from the top card (e.g. Height,\n                        value 5) The other players then read out the same category from their cards. The one with the\n                        best or highest value wins, and that player collects all the top cards, including their own, and\n                        moves them to the bottom of their pile. It is then their turn again to choose a category from\n                        the next card.\n                    </p>\n\n                    <p>\n                        If two or more cards share the top value or data is not available for that particular subject\n                        then all the cards are placed in the middle and the same player chooses again from the next\n                        card. The winner of the hand takes the cards in the middle as well.\n                    </p>\n\n                    <p>The person with all the cards at the end is the winner.</p>\n                    <img src={Example} alt=\"Example top trumps cards\" />\n                    <p>Example top trumps cards</p>\n                    <h2>The tasks</h2>\n                    <h4>Level 1</h4>\n                    <ol>\n                        <li>Render the Pokemon as Cards from data</li>\n                    </ol>\n                    <h4>Level 2</h4>\n                    <ol>\n                        <li>Render the Pokemon sprites</li>\n                        <li>Make the cards filterable by type</li>\n                        <li>Render cards differently by type</li>\n                    </ol>\n                    <h4>Level 3</h4>\n                    <ol>\n                        <li>Randomly deal the cards into two hands</li>\n                        <li>Show the first card in each hand</li>\n                        <li>Select an attribute to play e.g. Attack</li>\n                        <li>Show the winner of the hand</li>\n                        <li>Or show a tie hand</li>\n                        <li>Keep a score, or assign the round winner the losing card</li>\n                        <li>Example actions: Reset game, show all cards, start game</li>\n                    </ol>\n                    <p>\n                        <strong>Add, change or modify features as you see fit, have fun with it!</strong>\n                    </p>\n                    <p>\n                        <strong>Feel free to use react-plugins e.g. react-router, redux</strong>\n                    </p>\n                </main>\n                <footer>&copy; 2019 Brilliant Basics Ltd</footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}